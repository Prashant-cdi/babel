"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function pluginTransformArrayIncludes({ types: t, }) {
    return {
        name: 'transform array includes',
        visitor: {
            CallExpression(path) {
                const includesExpression = path.node;
                if (includesExpression.visited)
                    return;
                const { callee, arguments: args } = includesExpression;
                if (!t.isMemberExpression(callee))
                    return;
                if (!t.isIdentifier(callee.property, { name: 'includes' }) &&
                    !t.isStringLiteral(callee.property, { value: 'includes' })) {
                    return;
                }
                const indexOfExpression = t.binaryExpression('!==', t.callExpression(t.memberExpression(callee.object, t.identifier('indexOf')), args), t.numericLiteral(-1));
                if (t.isArrayExpression(callee.object)) {
                    path.replaceWith(indexOfExpression);
                }
                else {
                    const isArrayExpression = t.callExpression(t.memberExpression(t.identifier('Array'), t.identifier('isArray')), [callee.object]);
                    includesExpression.visited = true;
                    path.replaceWith(t.expressionStatement(t.conditionalExpression(isArrayExpression, indexOfExpression, includesExpression)));
                }
            },
        },
    };
}
exports.default = pluginTransformArrayIncludes;
